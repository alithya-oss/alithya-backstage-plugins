app:
  title: 'Scaffolded Backstage App'
  baseUrl: ${APP_BASE_URL}
  listen:
    port: 3000
    host: 0.0.0.0
organization:
  name: ${ORGANIZATION_NAME}

backend:
  baseUrl: ${BACKEND_BASE_URL}
  listen:
    host: 0.0.0.0
    port: ${BACKEND_PORT}
  csp:
    connect-src: ["'self'", 'http:', 'https:']
  cors:
    origin: ${BACKEND_CORS_ORIGIN}
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  database:
    client: pg
    connection:
      host: ${BACKEND_DATABASE_POSTGRES_HOST}
      port: ${BACKEND_DATABASE_POSTGRES_PORT}
      user: ${BACKEND_DATABASE_POSTGRES_USER}
      password: ${BACKEND_DATABASE_POSTGRES_PASSWORD}
  platformRegion: ${BACKEND_PLATFORM_REGION}
integrations:
  github:
    - host: github.com
      apps:
        - appId: ${GITHUB_APP_ID}
          clientId: ${GITHUB_CLIENT_ID}
          clientSecret: ${GITHUB_CLIENT_SECRET}
          webhookSecret: ${GITHUB_WEBHOOK_SECRET}
          privateKey: ${GITHUB_PRIVATE_KEY}
  gitlab:
    - host: ${GITLAB_HOSTNAME}
      apiBaseUrl: https://${GITLAB_HOSTNAME}/api/v4
      baseUrl: https://${GITLAB_HOSTNAME}
      token: ${GITLAB_TOKEN}
proxy:
  /gitlab/api:
    target: https://gitlab.com/api/v4
    allowedHeaders:
      - Authorization
      - Content-Type
    headers:
      Accept: application/json
      Content-Type: application/json
techdocs:
  builder: ${TECHDOCS_BUILDER}
  generator:
    runIn: ${TECHDOCS_GENERATOR_RUN_IN}
  publisher:
    type: ${TECHDOCS_PUBLISHER_TYPE} #

auth:
  environment: ${AUTH_ENVIRONMENT}
  providers:
    guest:
      dangerouslyAllowOutsideDevelopment: ${AUTH_PROVIDERS_GUEST_DANGEROUSLY_ALLOW_OUTSIDE_DEVELOPMENT}
    github:
      development:
        clientId: ${GITHUB_CLIENT_ID}
        clientSecret: ${GITHUB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: usernameMatchingUserEntityName
    gitlab:
      development:
        clientId: ${GITLAB_CLIENT_ID}
        clientSecret: ${GITLAB_CLIENT_SECRET}
        signIn:
          resolvers:
            - resolver: emailLocalPartMatchingUserEntityName  
scaffolder:
catalog:
  rules:
    - allow:
        [
          Domain,
          Component,
          System,
          API,
          Resource,
          Location,
          Template,
          User,
          Group,
          AWSEnvironment,
          AWSEnvironmentProvider,
        ]
  providers:
    githubOrg:
      - id: default
        githubUrl: https://github.com
        orgs:
          - harmonix-generated-environments
        schedule:
          frequency: PT30M
          timeout: PT1M
    gitlab:
      orgDefault:
        host: gitlab.com
        orgEnabled: true
        group: alithya-csna
        groupPattern: '[\s\S]*'
        schedule:
          frequency:
            minutes: 30
          timeout:
            minutes: 3
        rules:
          - allow:
              - Group
              - User
      default:
        host: gitlab.com
        branch: main
        fallBackBranch: master
        skipForkedRepos: true
        group: alithya-csna
        entityFilename: catalog-info.yaml
        projectPattern: '[\s\S]*'
        schedule:
          frequency:
            minutes: 30
          timeout:
            minutes: 3
        rules:
          - allow:
              - Resource
              - Component
              - API
              - System
              - Location
              - Template
              - Group
              - User              

  orphanStrategy: delete
  processingInterval:
    minutes: 10
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  locations:
    - type: url
      target: ${CATALOG_TEMPLATE_URL}
      rules:
        - allow:
            [
              Domain,
              Component,
              System,
              API,
              Resource,
              Location,
              Template,
              AWSEnvironment,
              AWSEnvironmentProvider,
            ]
    - type: file
      target: ../../examples/landing-zone-accelerator/*
      rules:
        - allow: [Component, System]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: ${PERMISSION_ENABLED}

aws:
  accountDefaults:
    roleName: ${AWS_ACCOUNT_DEFAULTS_ROLE_NAME}
    partition: ${AWS_ACCOUNT_DEFAULTS_PARTITION}
    region: ${AWS_ACCOUNT_DEFAULTS_REGION}
  mainAccount:
    accessKeyId: ${AWS_MAIN_ACCOUNT_ACCESS_KEY_ID}
    secretAccessKey: ${AWS_MAIN_ACCOUNT_SECRET_ACCESS_KEY}
    region: ${AWS_MAIN_ACCOUNT_REGION}
  accounts:
    - accountId: '957201034306'
      roleName: ${AWS_BILLING_ACCOUNT_ROLE_NAME}
  locator:
    resourceTaggingApi:
      accounts:
        - '012345678901'
      regions:
        - us-east-1
  sso:
    subdomain: ${AWS_SSO_SUBDOMAIN}
  costInsights:
    costExplorer:
      accountId: '${AWS_COST_EXPLORER_ACCOUNT_ID}'
      region: ${AWS_COST_EXPLORER_REGION}
    cache:
      enabled: ${COST_INSIGHTS_CACHE_ENABLED}
      defaultTtl: ${COST_INSIGHTS_CACHE_DEFAULT_TTL}
      readTime: ${COST_INSIGHTS_CACHE_READ_TIME}
    entityGroups:
      - kind: Component
        groups:
          - name: service
            type: DIMENSION
            key: SERVICE
          - name: landing-zone-accelerator-cccs
            type: TAG
            key: Accelerator

costInsights:
  engineerCost: ${COST_INSIGHTS_ENGINEER_COST}
